<div class="modal-header">
    <h4 class="modal-title">API</h4>
</div>
<div class="modal-body">
    <ul>
        <li><a href="#api_error">Ошибка валидации с сервера</a></li>
        <li><a href="#api_login">Авторизация</a></li>
        <li><a href="#api_register">Регистрация</a></li>
        <li><a href="#api_imageupload">Загрузка изображения</a></li>
        <li><a href="#api_restore_password">Восстановление пароля</a></li>
        <li><a href="#api_themes">Загрузка спортивных тем</a></li>
        <li><a href="#api_video">Загрузка видео с ютуба</a></li>
        <li><a href="#api_journal_add">Создание записи в дневнике</a></li>
        <li><a href="#api_journal_delete">Удаление записи в дневнике</a></li>
        <li><a href="#api_journal_edit">Редактирование записи в дневнике</a></li>
        <li><a href="#api_profile_view">Получить данные о профиле</a></li>
        <li><a href="#api_record_view">Страница просмотра записи</a></li>
        <li><a href="#api_like">Лайк/дизлайк</a></li>
        <li><a href="#api_complain">Жалоба на пользователя</a></li>
        <li><a href="#api_achievement_submit">Создание заявки на достижение</a></li>
        <li><a href="#api_achievement_view">Просмотр заявки на достижение</a></li>
        <li><a href="#api_achievement_voice">Голосование за заявку на достижение</a></li>
        <li><a href="#api_achievement_list">Просмотр списка заявок на достижение + фильтрация</a></li>
        <li><a href="#api_avatar">Удаление и загрузка аватара</a></li>
        <li><a href="#api_users_list">Страница атлетов</a></li>
        <li><a href="#api_subscribe">Подписка/отписка</a></li>
        <li><a href="#api_tape">Страница ленты пользователя</a></li>
        <li><a href="#api_settings_account">Настройки аккаунта</a></li>
        <li><a href="#api_settings_profile">Настройки профиля</a></li>
    </ul>
    <ul class="dev__api__content">

        <li id="api_error" class="dev__api__row">
            <p>пример отправки общей ошибки с сервера и ошибок для каждого поля</p>
            <code>POST: /api/xxx</code>
            <b>
                send data:
                <pre>
{
    phone: x,
    password: x
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: false,
    data: null,
    errors: {
        common: {
            error: 'Неверные телефон/пароль',
            fields: ['phone', 'password']
        },
        fields: [
            {
                name: 'phone',
                error: 'Неверный номер телефона'
            },
            {
                name: 'email',
                error: 'Такая почта уже зарегистрирована'
            }
        ]
    }
}
                    </pre>
            </b>
        </li>



        <li id="api_login" class="dev__api__row">
            <p>авторизация пользователя. возможно необходимо будет добавить какой то токен в ответ, который будет в дальнейшем использоваться в заголовках запросов</p>
            <code>POST: /api/login</code>
            <b>
                send data:
                <pre>
{
    phone: x,
    password: x
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        id: x,
        avatar: x,
        fullName: x
    },
    errors: null
}
                    </pre>
            </b>
        </li>

        <li id="api_register" class="dev__api__row">
            <p>первый шаг регистрации. нужно только проверить правильность данных на сервере, отравить проверочный код на телефонный номер и в случае чего вернуть ошибки валидации</p>
            <code>POST: /api/register/step1</code>
            <b>
                send data:
                <pre>
{
    imgId: x,
    name: x,
    sername: x,
    birthday: x (dd MMM yyyy),
    sportTime: x (0->7),
    phone: x,
    gender: x (male, female)
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null
}
                    </pre>
            </b>

            <p>второй и заключительный шаг регистрации.</p>
            <code>POST: /api/register/step1</code>
            <b>
                send data:
                <pre>
{
    imgId: x,
    name: x,
    lastName: x,
    birthday: x (dd MMM yyyy),
    sportTime: x (0->7),
    phone: x,
    gender: x (male, female)
    password: x,
    passwordRepeat: x,
    code: x
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null
}
                    </pre>
            </b>
        </li>

        <li id="api_imageupload" class="dev__api__row">
            <p>загрузка изображения</p>
            <code>POST: /api/upload</code>
            <b>
                send data:
                <pre>
{
    imageFormData
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        id: x,
        url: x
    },
    errors: null
}
                    </pre>
            </b>

        </li>

        <li id="api_restore_password" class="dev__api__row">
            <p>восстановление пароля. отправляется номер телефона желающего восстановить пароль</p>
            <code>POST: /api/restore_password_one</code>
            <b>
                send data:
                <pre>
{
    phone: x
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null
}
                    </pre>
            </b>
            <p>восстановление пароля. отправляется номер телефона и проверочный код</p>
            <code>POST: /api/restore_password_two</code>
            <b>
                send data:
                <pre>
{
    phone: x,
    code: x,
    password: x,
    passwordRepeat: x
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null
}
                    </pre>
            </b>

        </li>

        <li id="api_themes" class="dev__api__row">
            <p>запрос существующих спортивных тегов. для автокомплита</p>
            <code>GET: /api/sport_themes</code>
            <b>
                send data:
                <pre>
{
    query: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: ['турник', 'брусья'],
    errors: null
}
                    </pre>
            </b>

        </li>

        <li id="api_video" class="dev__api__row">
            <p>загрузка видео с ютуб. отправляется ссылка на видео youtube, в базе создается запись с собственным id, с remoteId этого видео (айдишник видео на ютубе), embeddedUrl урл для вставки, и картинкой. Эти же данные возвращаются при "загрузке видео"</p>
            <code>POST: /api/youtube</code>
            <b>
                send data:
                <pre>
{
    link: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        id: xxx,
        remoteId: xxx,
        img: xxx,
        embeddedUrl: xxx
    },
    errors: null
}
                    </pre>
            </b>

        </li>

        <li id="api_journal_add" class="dev__api__row">
            <p>Добавление записи в дневник</p>
            <code>POST: /api/journal</code>
            <b>
                send data:
                <pre>
{
    text: xxx,
    media: [
        { id: xxx, type: 'video', img: xxx },
        { id: xxx, type: 'image', img: xxx }
    ],
    themes: [ 'xxx', 'xxx' ]
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        id: x,
        date: xxx, (dd/MM/YYYY)
        text: xxx,
        media: [
            { id: xxx, type: 'video', img: xxx },
            { id: xxx, type: 'image', img: xxx }
        ],
        themes: [ 'xxx', 'xxx' ]
    }
    errors: null
}
                    </pre>
            </b>

        </li>

        <li id="api_journal_delete" class="dev__api__row">
            <p>Удаление записи в дневник</p>
            <code>DELETE: /api/journal</code>
            <b>
                send data:
                <pre>
{
    id: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null
}
                    </pre>
            </b>

        </li>


        <li id="api_journal_edit" class="dev__api__row">
            <p>Редактирование записи в дневник</p>
            <code>PUT: /api/journal</code>
            <b>
                send data:
                <pre>
{
    *json model* 
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null
}
                    </pre>
            </b>

        </li>


        <li id="api_profile_view" class="dev__api__row">
            <p>Запрос данных о профиле</p>
            <code>GET: /api/profile</code>
            <b>
                send data:
                <pre>
{
    id: x
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        avatar: x,
        fullName: x,
        age: x,
        sportTime: x,
        location: x,
        isOwner: true/false,
        followers: [
            list: [
                { id: 1, fullName: xxx, avatar: xxx },
                { id: 2, fullName: xxx, avatar: xxx },
                { id: 3, fullName: xxx, avatar: xxx },
                { id: 4, fullName: xxx, avatar: xxx }
            ]
            count: 120
        ],
        subscribe: [
            list: [
                { id: 1, fullName: xxx, avatar: xxx },
                { id: 2, fullName: xxx, avatar: xxx },
                { id: 3, fullName: xxx, avatar: xxx },
                { id: 4, fullName: xxx, avatar: xxx }
            ]
            count: 120
        ],     
        media: [ *Это девять рандомных медиа файлов из записей* index - порядок картинки в массиве картинок к этой записи начиная с нуля
            { recordId: 1, index: 1, url: 'imageUrl', type: 'image' },
            { recordId: 2, index: 0, url: 'imageUrl', type: 'video' }
        ],   
        journals: [
            {
                id: 1,
                author: { id: 1, avatar: xxx, fullName: xxx },
                created: x,
                likes: {
                    list: [
                        { id: 1, avatar: xxx, fullName: xxx },
                        { id: 2, avatar: xxx, fullName: xxx }
                    ],
                    isLiked: true/false
                    count: 23
                },
                text: x,
                media: [],
                tags: ['fortress', 'sport']
            }
        ],
        achievements: {
            closed: {
                count: 27,
                list: [ *здесь 4 последних полученных достижения* 
                    { id: 1, cupImage: 'asdasd', ... }
                ]
            },
            opened: {
                count: 27,
                list: [ *здесь 4 последних опубликованных заявки на достижения, т.е. те которые ещё не получены (не прошло 4 дня)* 
                    { id: 1, cupImage: 'asdasd', ... }
                ]
            }
        }
    },
    errors: null
}
                    </pre>
            </b>

        </li>

        <li id="api_record_view" class="dev__api__row">
            <p>Страница просмотра записи. <div class="alert alert-danger">!!! Модель пока что без комментариев</div></p>
            <code>GET: /api/journal/:id</code>
            <b>
                send data:
                <pre>
{
    *none*
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
            id: 123
            text: '1231231asdasddasdasd asd asd as dasasdsdasdasdasd asd asd  asd asdasdas dasdas das das 23'
            author: {
                id: 12
                avatar: 'avatar'
                fullName: 'Павел Козловский'
            }
            date: '19 июля 2015 | 15:08'
            likes: {
                isLiked: true
                list: [
                    { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                    { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                    { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                    { id: 4, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                    { id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                ]
                count: 23
            }
            media: [
                {
                    id: 1,
                    type: 'image',
                    img: 'srctest1',
                    likes: {
                        isLiked: true
                        list: [
                            { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 4, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                        ]
                        count: 23
                    }
                },
                {
                    id: 2,
                    type: 'image',
                    img: 'srctest2',
                    likes: {
                        isLiked: true
                        list: [
                            { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 4, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                        ]
                        count: 23
                    }
                },
                {
                    id: 3,
                    type: 'video',
                    img: 'srctest3',
                    likes: {
                        isLiked: true
                        list: [
                            { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 4, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                        ]
                        count: 23
                    }
                },
                {
                    id: 4,
                    type: 'image',
                    img: 'srctest4',
                    likes: {
                        isLiked: false
                        list: [
                            { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 4, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                        ]
                        count: 23
                    }
                }
            ],
            tags: ['Питание', 'Программа тренировок'],
            comments {
                list: [
                    { 
                        id: 1, 
                        text: 'wwwwww wwwwww' ,
                        author {id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1'},
                        likes { list: [...], count: 5, isLiked: false },
                        Date: "",
                        CommentFor { id: 5, name: "" } //изменить как удобнее будет
                    },
                ]
                count: 23
            }
        }
    },
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>


        <li id="api_like" class="dev__api__row">
            <p>Лайк дизлайк</p>
            <code>POST: /api/like</code>
            <b>
                send data:
                <pre>
{
    id: x,
    type: record/media
    action: like/dislike
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>

        <li id="api_complain" class="dev__api__row">
            <p>Жалоба на пользователя</p>
            <code>POST: /api/complain</code>
            <b>
                send data:
                <pre>
{
    entityId: x,
    userId: x,
    text: x,
    type: profile/comment
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>


        <li id="api_comment" class="dev__api__row">
            <p>Комментарий</p>
            <code>POST: /api/comment</code>
            <b>
                send data:
                <pre>
{
    commentForId: x,
    commentType: answer/comment,
    entityId: x,
    entityType: record/...,
    text: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        id: 1,
        text: 'wwwwww wwwwww' ,
        author: {id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1'},
        likes: {
            list: [
                { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
            ],
            count: 5,
            isLiked: false
        },
        created: xxx,
        commentFor: { id: 2, name: "Вася" }
    },
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>


        <li id="api_achievement_submit" class="dev__api__row">
            <p>Создание заявки на достижение</p>
            <code>GET: /api/achievement/temp</code>
            <p>Запрос к данным для создания заявки.</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        model: { *иначе пустой объект*
            id: 2 *обязателен id*
            step: 1 *текущий шаг*
            type: { *упражнение*
                id: 2
                value: 60
            },
            video: {
                id: 12 *в базе* 
                remoteUrl: 'http://www.youtube.com/watch?v=zWc41BbjlZ4' *url видео на ютубе* 
            }
        },
        cards: [ *доступные упражения*
            {
                id: 1,
                img: 'imageUrl',
                title: 'Подтягивания'
                values: [10, 20, 30, 40, 50, 60, 70],
                videoUrl: 'remote youtube video url'
            },
            ...
        ],
        marks: [ *Заявки, которые нужно оценить пользователю. Максимум 3. Если их нет, то массив пустой*
            {
                id: 1,
                cupImage: 'imageUrl' *иконка достижения* 
                title: 'Подтягивания. 35 Повторений'
                created: *date*
                timeStamp: '234242342' *осталось времени timestamp*
                voice: {
                    for: 142 *проголосовали за*
                    against: 10 *проголосовали против*
                },
                author: {
                    id: 1
                    avatar: 'avatarImageUrl'
                    fullName: 'Mikki Mouse'
                },
                status: null / 'fail' / 'credit' * статус достижения, но в данном случает всегда null
            }
        ]
    },
    errors: null,
    message: null
}
                    </pre>
            </b>


            <code>POST: /api/achievement/temp</code>
            <p>Создание новой заявки. В случае если данные об уже созданной заявки с сервера пришли пустые</p>
            <b>
                send data:
                <pre>
{
    type: {
        id: 2,
        value: 40
    }
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true/false,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>

            <code>PUT: /api/achievement/temp</code>
            <p>Сохранение изменений в заявке.</p>
            <b>
                send data:
                <pre>
{
    type: { *всегда присутствует*
        id: 2,
        value: 40
    },
    video: { *может не быть. Если пользователь на втором шаге удалил видео, вернулся на первый и нажал "сле. шаг"*
        id: 23
    }
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true/false,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>

            <code>DELETE: /api/achievement/temp</code>
            <p>Удаление неопубликованной заявки</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true/false,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>
        </li>


        <li id="api_achievement_view" class="dev__api__row">
            <p>Страница просмотра достижения</p>
            <code>GET: /api/achievement/:id</code>
            <b>
                send data:
                <pre>
{
    *none*
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        id: 12
        title: 'Подтягивания. 35 Повторений'
        typeImage: 'typeImageUrl' # картинка кубка с упражнением
        videoUrl: 'remoteVideoUrl'
        author: {
            id: 12
            avatar: 'avatarImageUrl'
            fullName: 'Павел Козловский'
        }
        created: 'date' # дата создания
        timeStamp: '12312123' #осталось времени timestamp
        likes: {
            list: [
                { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                { id: 4, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                { id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
            ]
            count: 23
            isLiked: false
        }
        voice:
            for: 152    # за
            against: 9  # против
            isVoited: false     # голосовал или нет. Может голосовать один раз только
        comments: {
            list: [
                {
                    id: 1,
                    text: 'wwwwww wwwwww' ,
                    author: {id: 5, fullName: 'Владимир Владимирович', avatar: 'avatartest1'},
                    likes: {
                        list: [
                            { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                        ],
                        count: 5,
                        isLiked: false
                    },
                    date: "19 июня 2015 | 15:08",
                    commentFor: { id: 2, name: "Вася" }
                },
                {
                    id: 2,
                    text: 'wwwwww wwwwww' ,
                    author: {id: 5, fullName: 'Вася', avatar: 'avatartest1'},
                    likes: {
                        list: [
                            { id: 1, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 2, fullName: 'Владимир Владимирович', avatar: 'avatartest1' },
                            { id: 3, fullName: 'Владимир Владимирович', avatar: 'avatartest1' }
                        ],
                        count: 5,
                        isLiked: false
                    },
                    date: "19 июня 2015 | 15:08"
                }
            ]
            count: 23
        }
    },
    errors: null,
    message: null
}
                    </pre>
            </b>
        </li>

        <li id="api_achievement_voice" class="dev__api__row">
            <p>Голосование за заявку на достижение</p>
            <code>POST: /api/achievement/voice</code>
            <b>
                send data:
                <pre>
{
    id: x,
    action: like/dislike
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        for: xx,
        against: xx
    },
    errors: null,
    message: null
}
                    </pre>
            </b>
        </li>

        <li id="api_achievement_list" class="dev__api__row">
            <p>При первоначальной загрузке страницы осуществляется запрос к настройкам фильтра. В данном случае это список доступных упражнений</p>
            <code>GET: /api/achievement/filter</code>
            <p>Запрос настроек фильтра</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        types: ['Подтягивания', 'Отжимания']
    },
    errors: null,
    message: null
}
               </pre>
            </b>
            <code>GET: /api/achievement</code>
            <p>Запрос списка заявок</p>
            <b>
                send data:
                <pre>
{
    actual: closed/opened * прошедшие достижения или нет
    status: all/fail/credit * все, незачтенные, зачтенные (относится только к прошедшим)
    type: 'Подтягивания' * упражнение (если параметр не приходит, то все упражнения)
    count: 20 * количество заявок
    page: 6 * страница
    
}
                </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        list: [] * список заявок, модель как на странице создания
        isMore: true/false * есть или нет ещё заявки по текущим параметрам (для подгрузки)
    },
    errors: null,
    message: null
}
                </pre>
            </b>
        </li>


        <li id="api_avatar" class="dev__api__row">
            <p>Удаление и загрузка аватара. В настоящий момент у пользователя можно посмотреть только один аватар - текущий. При загрузке аватара, загружаемый аватар становится текущим. При удалении аватара текущий аватар принимает значение null. Остальные аватарки сохраняются у пользователя но пока не используются.</p>
            <code>POST: /api/upload</code>
            <p>Загрузка аватара</p>
            <b>
                send data:
                <pre>
{
    name отправляется равным 'Avatar'
}
                </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: 'avatarUrl',
    errors: null,
    message: null
}
               </pre>
            </b>
            <code>DELETE: /api/profile/avatar</code>
            <p>Удаление аватара</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: null
}
                </pre>
            </b>
        </li>


        <li id="api_users_list" class="dev__api__row">
            <p>При первоначальной загрузке страницы осуществляется запрос к настройкам фильтра. Пока настройки фильтра неизвестны</p>
            <code>GET: /api/users/filter</code>
            <p>Запрос настроек фильтра</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        age: [],
        gender: [],
        inSport: []
    },
    errors: null,
    message: null
}
               </pre>
            </b>
            <code>GET: /api/users</code>
            <p>Запрос списка пользователей</p>
            <b>
                send data:
                <pre>
{
    age: x, *возраст*
    inSport: x, *стаж*
    gender: x, *пол*
    city: x, *город*
    country: x, *страна*
    query: x, *поиск по имени*
    count: 20, * количество пользователей
    page: 6, * страница
    
}
                </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        list: [ * список пользователей
            {
                id: 1,
                fullName: 'Вася Козлов',
                avatar: 'avatarUrl',
                age: 23,
                sportTime: 4,
                location: 'Владивосток, Россия',
                achievementsCount: 10,
                recordsCount: 2,
                subscribers: {
                    count: 19,
                    isSubscribed: false,
                    list: [
                        { id: 1, avatar: 'avatarUrl', ... }
                    ]
                }
            }
        ] 
        isMore: true/false * есть или нет ещё пользователи по текущим параметрам (для подгрузки)
    },
    errors: null,
    message: null
}
                </pre>
            </b>
        </li>


        <li id="api_subscribe" class="dev__api__row">
            <p>Подписка отписка</p>
            <code>POST: /api/subscribe</code>
            <b>
                send data:
                <pre>
{
    id: x,
    actionType: subscribe/unsubscribe
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>


        <li id="api_tape" class="dev__api__row">
            <p>Страница ленты пользователя (tape). ! Внимание ! Проваленные достижения в список не попадают.</p>
            <code>GET: /api/tape</code>
            <b>
                send data:
                <pre>
{
    count: 20,
    page: 2
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        list: [
            { 
                type: 'record'
                *модель как в списке записей на странице профиля*
            },
            {
                type: 'achievement'
                *модель как списке достижений на странице достижений*
            }
        ],
        isMore: true
    },
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>


        <li id="api_geo" class="dev__api__row">
            <p>Запросы к городам и странам</p>
            <code>GET: /api/geo/country</code>
            <b>
                send data:
                <pre>
{
    query: xxx,
    count: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: [],
    errors: null,
    message: null
}
                    </pre>
            </b>

            <code>GET: /api/geo/city</code>
            <b>
                send data:
                <pre>
{
    query: xxx,
    count: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: [],
    errors: null,
    message: null
}
                    </pre>
            </b>

        </li>



        <li id="api_settings_account" class="dev__api__row">
            <p>Настройки аккаунта</p>
            <code>GET: /api/settings/account</code>
            <p>Запрос настроек аккаунта. В данном случае возвращается полускрытый телефон пользователя</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        phone: +7 *** *** ** 32
    },
    errors: null,
    message: null
}
                    </pre>
            </b>

            <code>POST: /api/settings/password</code>
            <p>Смена пароля пользователя</p>
            <b>
                send data:
                <pre>
{
    oldPassword: xxx,
    newPassword: xxx,
    newRepeatPassword: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: "Пароль был успешно изменен"
}
                    </pre>
            </b>


            <code>POST: /api/settings/change_phone_one</code>
            <p>Получить код для смены номера телефона. Отправляется новый номер телефона. На который отсылается смс с кодом</p>
            <b>
                send data:
                <pre>
{
    phone: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: null
}
                    </pre>
            </b>

            <code>POST: /api/settings/change_phone_two</code>
            <p>Смена номера телфона. Отправляется тот же новый номер телфона и проверочный код</p>
            <b>
                send data:
                <pre>
{
    phone: xxx,
    code: xxx
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: "Ваш номер телефона был успешно изменен"
}
                    </pre>
            </b>

        </li>



        <li id="api_settings_profile" class="dev__api__row">
            <p>Настройки профиля</p>
            <code>GET: /api/settings/profile</code>
            <p>Запрос настроек аккаунта и свойств полей.</p>
            <b>
                send data:
                <pre>
{
    *none*
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: {
        model: {
            firstName: "",
            lastName: "",
            birthday: "",
            gender: { value: "male", label: "Муж." },
            sportTime: { value: 0, label: "" }
        },
        prop: {
            genders: [{ value: "male", label: "Муж." }, { value: "female", label: "Жен." }],
            sportTimes: [ { value: 0, label: "менее года"}, ... ]
        }
    },
    errors: null,
    message: null
}
                    </pre>
            </b>

            <code>PUT: /api/settings/profile</code>
            <p>Сохранение настроек профиля/p>
            <b>
                send data:
                <pre>
{
    firstName: "",
    lastName: "",
    birthday: "",
    gender: { value: "male", label: "Муж." },
    sportTime: { value: 0, label: "" }
}
                    </pre>
            </b>
            <b>
                accept data:
                <pre>
{
    success: true,
    data: null,
    errors: null,
    message: "Настройки профиля успешно сохранены"
}
                    </pre>
            </b>
        </li>


    </ul>
</div>